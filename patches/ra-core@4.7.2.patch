diff --git a/dist/cjs/dataProvider/useGetManyAggregate.js b/dist/cjs/dataProvider/useGetManyAggregate.js
index 3ad1abb15221b360521e3e7ee4d55c9a98e8e65c..f97a50a20e05dbb6633d9562658b452479730eb2 100644
--- a/dist/cjs/dataProvider/useGetManyAggregate.js
+++ b/dist/cjs/dataProvider/useGetManyAggregate.js
@@ -130,7 +130,7 @@ var useGetManyAggregate = function (resource, params, options) {
         });
     }, __assign({ placeholderData: placeholderData, onSuccess: function (data) {
             // optimistically populate the getOne cache
-            data.forEach(function (record) {
+            (data ?? []).forEach(function (record) {
                 queryClient.setQueryData([resource, 'getOne', { id: String(record.id), meta: meta }], function (oldRecord) { return oldRecord !== null && oldRecord !== void 0 ? oldRecord : record; });
             });
         }, retry: false }, options));
diff --git a/dist/esm/dataProvider/useGetManyAggregate.js b/dist/esm/dataProvider/useGetManyAggregate.js
index 080dfdd73ecc0633006c47e2f12680e41ecb1b49..0e15a71e84d57194fe65eb9e19d3546748eecab7 100644
--- a/dist/esm/dataProvider/useGetManyAggregate.js
+++ b/dist/esm/dataProvider/useGetManyAggregate.js
@@ -124,7 +124,7 @@ export var useGetManyAggregate = function (resource, params, options) {
         });
     }, __assign({ placeholderData: placeholderData, onSuccess: function (data) {
             // optimistically populate the getOne cache
-            data.forEach(function (record) {
+            (data ?? []).forEach(function (record) {
                 queryClient.setQueryData([resource, 'getOne', { id: String(record.id), meta: meta }], function (oldRecord) { return oldRecord !== null && oldRecord !== void 0 ? oldRecord : record; });
             });
         }, retry: false }, options));
diff --git a/src/dataProvider/useGetManyAggregate.ts b/src/dataProvider/useGetManyAggregate.ts
index dea405e9c0b0c8d61d7cf9e2f8b9392a866980a5..c2fe9c93acdb274b3c76897f920057313b30d418 100644
--- a/src/dataProvider/useGetManyAggregate.ts
+++ b/src/dataProvider/useGetManyAggregate.ts
@@ -120,7 +120,7 @@ export const useGetManyAggregate = <RecordType extends RaRecord = any>(
             placeholderData,
             onSuccess: data => {
                 // optimistically populate the getOne cache
-                data.forEach(record => {
+                (data ?? []).forEach(record => {
                     queryClient.setQueryData(
                         [resource, 'getOne', { id: String(record.id), meta }],
                         oldRecord => oldRecord ?? record